{
	"info": {
		"_postman_id": "f2b085e8-b2c5-4f0f-a56d-3bf7a78a335b",
		"name": "walshame_project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16902369"
	},
	"item": [
		{
			"name": "auth0 get user #1 token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set kate_token environment variable from response",
							"pm.environment.set(\"jwt_1\", pm.response.json()[\"id_token\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"grant_type\": \"password\",\n    \"username\": \"kate@bush.com\",\n    \"password\": \"*Runn1ngUpThatH1ll*\",\n    \"client_id\": \"3K21icsiTS0DOBE73Z9YUSSDbpaKfKZC\",\n    \"client_secret\": \"hw5sPnWFkKUTr9QsV4K5n04F4GC0CzeH3_3nd-iZKa8a1IfaScZ5dyhQ8oWtepez\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://walshame-cs493.us.auth0.com/oauth/token",
					"protocol": "https",
					"host": [
						"walshame-cs493",
						"us",
						"auth0",
						"com"
					],
					"path": [
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth0 get user #2 token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set wednesday_token environment variable from response",
							"pm.environment.set(\"jwt_2\", pm.response.json()[\"id_token\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"grant_type\": \"password\",\n    \"username\": \"wednesday@adams.com\",\n    \"password\": \"*Thing1sCool*\",\n    \"client_id\": \"3K21icsiTS0DOBE73Z9YUSSDbpaKfKZC\",\n    \"client_secret\": \"hw5sPnWFkKUTr9QsV4K5n04F4GC0CzeH3_3nd-iZKa8a1IfaScZ5dyhQ8oWtepez\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://walshame-cs493.us.auth0.com/oauth/token",
					"protocol": "https",
					"host": [
						"walshame-cs493",
						"us",
						"auth0",
						"com"
					],
					"path": [
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"call grandma\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"call grandma\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item (400) attribute error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body contains invalid attributes.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item (400) date format error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body has invalid 'due_date' value.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"call grandma\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-080\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item (400) priority outside range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body has invalid 'priority' value.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"call grandma\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item 1 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"usr1_item_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Vaccuum floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item 2 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set boat id environment variable from response",
							"pm.environment.set(\"usr1_item2_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Wash dishes\",\n  \"done\": false,\n  \"due_date\": \"2022-12-29T23:59:59-0800\",\n  \"priority\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item 3 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Clean toilet\",\n  \"done\": false,\n  \"due_date\": \"2022-12-10T23:59:59-0800\",\n  \"priority\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item 4 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Clean mirrors\",\n  \"done\": false,\n  \"due_date\": \"2022-12-13T23:59:59-0800\",\n  \"priority\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item 5 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Wipedown surfaces\",\n  \"done\": true,\n  \"due_date\": \"2022-04-15T23:59:59-0800\",\n  \"priority\": 4\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item 6 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Clean Shower\",\n  \"done\": false,\n  \"due_date\": \"2022-12-01T23:59:59-0800\",\n  \"priority\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item (201) [user #2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set id environment variable from response",
							"pm.environment.set(\"usr2_item_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Write thank you card\",\n  \"done\": true,\n  \"due_date\": \"2022-12-29T23:59:59-0800\",\n  \"priority\": 4\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "get items (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "get items (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "get items (200) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"correct number total items\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"total_items\"]).to.equal(6);",
							"});",
							"",
							"pm.test(\"correct number of items in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"items\"].length).to.equal(5);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (404) invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (403) inccorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (200) [user #1, item #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Vaccuum floors\");",
							"    pm.expect(pm.response.json()[\"done\"]).to.eq(false);",
							"    pm.expect(pm.response.json()[\"due_date\"]).to.eq(\"2022-11-29T23:59:59-0800\");",
							"    pm.expect(pm.response.json()[\"priority\"]).to.eq(0);",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"// {",
							"//   \"name\": \"Vaccuum floors\",",
							"//   \"done\": false,",
							"//   \"due_date\": \"2022-11-29T23:59:59-0800\",",
							"//   \"priority\": 0,",
							"//   \"list\": null",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekly Cleaning To-Do\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Winter Break Trip To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list (400) attribute error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body contains invalid attributes.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list 1 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set list id environment variable from response",
							"pm.environment.set(\"usr1_list_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekly Cleaning To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list 2 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Healthcare To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list 3 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"API To-Do List\",\n  \"label\": \"school\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list 4 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Classroom Documentation To-Do List\",\n  \"label\": \"work\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list 5 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Queer Camp Planning To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list 6 (201) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Movies to Watch\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list 1 (201) [user #2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set list id environment variable from response",
							"pm.environment.set(\"usr2_list_id\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Winter Break Trip To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "get lists (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "get lists (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "get lists (200) [user #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"correct number total items\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"total_items\"]).to.equal(6);",
							"});",
							"",
							"pm.test(\"correct number of items in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"lists\"].length).to.equal(5);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (404) invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (403) inccorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (200) [user #1, list #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Weekly Cleaning To-Do List\");",
							"    pm.expect(pm.response.json()[\"label\"]).to.eq(\"personal\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mop floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mop floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (404) invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mop floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (403) incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mop floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (400) attribute error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body contains invalid attributes.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mop floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 0,\n  \"list\":[]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (400) date format error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body has invalid 'due_date' value.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mop floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-08\",\n  \"priority\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (400) priority outside range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body has invalid 'priority' value.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mop floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (204) [user #1 , item #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Mop floors\",\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-0800\",\n  \"priority\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (200) [user #1, item #1] Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mop floors\");",
							"    pm.expect(pm.response.json()[\"done\"]).to.eq(false);",
							"    pm.expect(pm.response.json()[\"due_date\"]).to.eq(\"2022-11-29T23:59:59-0800\");",
							"    pm.expect(pm.response.json()[\"priority\"]).to.eq(3);",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"// {",
							"//   \"name\": \"Vaccuum floors\",",
							"//   \"done\": false,",
							"//   \"due_date\": \"2022-11-29T23:59:59-0800\",",
							"//   \"priority\": 0,",
							"//   \"list\": null",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekly Tidying To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekly Tidying To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (404) invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekly Tidying To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (403) incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekly Tidying To-Do List\",\n  \"label\": \"personal\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (400) attribute error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body contains invalid attributes.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekly Tidying To-Do List\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (204) [user #1 , list #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Weekly Tidying To-Do List\",\n  \"label\": \"work\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (200) [user #1, list #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Weekly Tidying To-Do List\");",
							"    pm.expect(pm.response.json()[\"label\"]).to.eq(\"work\");",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"// {",
							"//   \"name\": \"Vaccuum floors\",",
							"//   \"done\": false,",
							"//   \"due_date\": \"2022-11-29T23:59:59-0800\",",
							"//   \"priority\": 0,",
							"//   \"list\": null",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (406) accepts header error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (404) invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (403) incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (400) attribute error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body contains invalid attributes.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": false,\n  \"list\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (400) date format error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body has invalid 'due_date' value.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": false,\n  \"due_date\": \"2022-11-29T23:59:59-08\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (400) priority outside range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body has invalid 'priority' value.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": false,\n  \"priority\": 6\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update item (204) [user #1, item #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"done\": true,\n  \"priority\": 5\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (200) [user #1, item #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mop floors\");",
							"    pm.expect(pm.response.json()[\"done\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"due_date\"]).to.eq(\"2022-11-29T23:59:59-0800\");",
							"    pm.expect(pm.response.json()[\"priority\"]).to.eq(5);",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"// {",
							"//   \"name\": \"Vaccuum floors\",",
							"//   \"done\": false,",
							"//   \"due_date\": \"2022-11-29T23:59:59-0800\",",
							"//   \"priority\": 0,",
							"//   \"list\": null",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"label\": \"work\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (406) accepts error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"406 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"406 Not Acceptable: Return type in Accept header unsupported.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"label\": \"work\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (404) invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"label\": \"work\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (403) incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"label\": \"work\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (400) attribute error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"400 Bad Request: Request body contains invalid attributes.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"label\": \"work\",\n  \"items\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update list (204) [user #1, list #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"label\": \"work\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (200) [user #1, list #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Weekly Tidying To-Do List\");",
							"    pm.expect(pm.response.json()[\"label\"]).to.eq(\"work\");",
							"",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list item (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list item (404) invalid list_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{invalid_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{invalid_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list item (404) invalid item_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list item (403) incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list item (204) [user #1, item #1 -> list #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add list item (403) item already assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: Item is already assigned to list\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (200) [user #1, item #1] Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mop floors\");",
							"    pm.expect(pm.response.json()[\"done\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"due_date\"]).to.eq(\"2022-11-29T23:59:59-0800\");",
							"    pm.expect(pm.response.json()[\"priority\"]).to.eq(5);",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"// {",
							"//   \"name\": \"Vaccuum floors\",",
							"//   \"done\": false,",
							"//   \"due_date\": \"2022-11-29T23:59:59-0800\",",
							"//   \"priority\": 0,",
							"//   \"list\": null",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (200) [user #1, list #1] Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Weekly Tidying To-Do List\");",
							"    pm.expect(pm.response.json()[\"label\"]).to.eq(\"work\");",
							"",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete list item (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete list item (404) invalid list_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{invalid_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{invalid_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete list item (404) invalid item_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete list item (403) incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete list item (404) item not on list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Item not assigned to specified list.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{usr1_item2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{usr1_item2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete list item (204) [user #1, item #1 -/- list #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}",
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (200) [user #1, item #1] Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mop floors\");",
							"    pm.expect(pm.response.json()[\"done\"]).to.eq(true);",
							"    pm.expect(pm.response.json()[\"due_date\"]).to.eq(\"2022-11-29T23:59:59-0800\");",
							"    pm.expect(pm.response.json()[\"priority\"]).to.eq(5);",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/items/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"// {",
							"//   \"name\": \"Vaccuum floors\",",
							"//   \"done\": false,",
							"//   \"due_date\": \"2022-11-29T23:59:59-0800\",",
							"//   \"priority\": 0,",
							"//   \"list\": null",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (200) [user #1, list #1] Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Weekly Tidying To-Do List\");",
							"    pm.expect(pm.response.json()[\"label\"]).to.eq(\"work\");",
							"",
							"    //Check if the self url is correct",
							"    const self_url = pm.environment.get(\"app_url\") + \"/lists/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete item (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete  item (404) invalid item_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete  item (403) incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete  item (204) [user #1 , item #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item (404) after deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items/{{usr1_item_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items",
						"{{usr1_item_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (200) [user #1, list #1] Copy 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid",
							"    pm.expect(pm.response.json()[\"items\"].length).to.eq(0);",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete list (401) missing token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"401 Unauthorized : Invalid JSON web token.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete  list (404) invalid item_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{invalid_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{invalid_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete  list (403) incorrect owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"403 Forbidden: User is not authorized to access this item.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete  list (204) [user #1 , item #1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get list (404) after deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"404 Not Found: Request id parameter invalid.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists/{{usr1_list_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists",
						"{{usr1_list_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "items invalid route (405)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(405);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/items",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "ilists nvalid route (405)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(405);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/lists",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"lists"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	]
}